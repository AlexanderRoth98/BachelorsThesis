/*
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.registry.user.client.api;

import com.registry.user.client.model.User;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserControllerApi
 */
@Ignore
public class UserControllerApiTest {

    private final UserControllerApi api = new UserControllerApi();

    
    /**
     * createUser
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUserUsingDELETETest() {
        User user = null;
        User response = api.createUserUsingDELETE(user);

        // TODO: test validations
    }
    
    /**
     * createUser
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUserUsingGETTest() {
        User user = null;
        User response = api.createUserUsingGET(user);

        // TODO: test validations
    }
    
    /**
     * createUser
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUserUsingHEADTest() {
        User user = null;
        User response = api.createUserUsingHEAD(user);

        // TODO: test validations
    }
    
    /**
     * createUser
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUserUsingOPTIONSTest() {
        User user = null;
        User response = api.createUserUsingOPTIONS(user);

        // TODO: test validations
    }
    
    /**
     * createUser
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUserUsingPATCHTest() {
        User user = null;
        User response = api.createUserUsingPATCH(user);

        // TODO: test validations
    }
    
    /**
     * createUser
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUserUsingPOSTTest() {
        User user = null;
        User response = api.createUserUsingPOST(user);

        // TODO: test validations
    }
    
    /**
     * createUser
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUserUsingPUTTest() {
        User user = null;
        User response = api.createUserUsingPUT(user);

        // TODO: test validations
    }
    
    /**
     * deleteUser
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserUsingDELETETest() {
        String email = null;
        User response = api.deleteUserUsingDELETE(email);

        // TODO: test validations
    }
    
    /**
     * deleteUser
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserUsingGETTest() {
        String email = null;
        User response = api.deleteUserUsingGET(email);

        // TODO: test validations
    }
    
    /**
     * deleteUser
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserUsingHEADTest() {
        String email = null;
        User response = api.deleteUserUsingHEAD(email);

        // TODO: test validations
    }
    
    /**
     * deleteUser
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserUsingOPTIONSTest() {
        String email = null;
        User response = api.deleteUserUsingOPTIONS(email);

        // TODO: test validations
    }
    
    /**
     * deleteUser
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserUsingPATCHTest() {
        String email = null;
        User response = api.deleteUserUsingPATCH(email);

        // TODO: test validations
    }
    
    /**
     * deleteUser
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserUsingPOSTTest() {
        String email = null;
        User response = api.deleteUserUsingPOST(email);

        // TODO: test validations
    }
    
    /**
     * deleteUser
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserUsingPUTTest() {
        String email = null;
        User response = api.deleteUserUsingPUT(email);

        // TODO: test validations
    }
    
    /**
     * findUserByEmail
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findUserByEmailUsingDELETETest() {
        String email = null;
        User response = api.findUserByEmailUsingDELETE(email);

        // TODO: test validations
    }
    
    /**
     * findUserByEmail
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findUserByEmailUsingGETTest() {
        String email = null;
        User response = api.findUserByEmailUsingGET(email);

        // TODO: test validations
    }
    
    /**
     * findUserByEmail
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findUserByEmailUsingHEADTest() {
        String email = null;
        User response = api.findUserByEmailUsingHEAD(email);

        // TODO: test validations
    }
    
    /**
     * findUserByEmail
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findUserByEmailUsingOPTIONSTest() {
        String email = null;
        User response = api.findUserByEmailUsingOPTIONS(email);

        // TODO: test validations
    }
    
    /**
     * findUserByEmail
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findUserByEmailUsingPATCHTest() {
        String email = null;
        User response = api.findUserByEmailUsingPATCH(email);

        // TODO: test validations
    }
    
    /**
     * findUserByEmail
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findUserByEmailUsingPOSTTest() {
        String email = null;
        User response = api.findUserByEmailUsingPOST(email);

        // TODO: test validations
    }
    
    /**
     * findUserByEmail
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findUserByEmailUsingPUTTest() {
        String email = null;
        User response = api.findUserByEmailUsingPUT(email);

        // TODO: test validations
    }
    
    /**
     * readUsers
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readUsersUsingDELETETest() {
        List<User> response = api.readUsersUsingDELETE();

        // TODO: test validations
    }
    
    /**
     * readUsers
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readUsersUsingGETTest() {
        List<User> response = api.readUsersUsingGET();

        // TODO: test validations
    }
    
    /**
     * readUsers
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readUsersUsingHEADTest() {
        List<User> response = api.readUsersUsingHEAD();

        // TODO: test validations
    }
    
    /**
     * readUsers
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readUsersUsingOPTIONSTest() {
        List<User> response = api.readUsersUsingOPTIONS();

        // TODO: test validations
    }
    
    /**
     * readUsers
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readUsersUsingPATCHTest() {
        List<User> response = api.readUsersUsingPATCH();

        // TODO: test validations
    }
    
    /**
     * readUsers
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readUsersUsingPOSTTest() {
        List<User> response = api.readUsersUsingPOST();

        // TODO: test validations
    }
    
    /**
     * readUsers
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readUsersUsingPUTTest() {
        List<User> response = api.readUsersUsingPUT();

        // TODO: test validations
    }
    
    /**
     * updateUser
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserUsingDELETETest() {
        String email = null;
        User updatedUser = null;
        User response = api.updateUserUsingDELETE(email, updatedUser);

        // TODO: test validations
    }
    
    /**
     * updateUser
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserUsingGETTest() {
        String email = null;
        User updatedUser = null;
        User response = api.updateUserUsingGET(email, updatedUser);

        // TODO: test validations
    }
    
    /**
     * updateUser
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserUsingHEADTest() {
        String email = null;
        User updatedUser = null;
        User response = api.updateUserUsingHEAD(email, updatedUser);

        // TODO: test validations
    }
    
    /**
     * updateUser
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserUsingOPTIONSTest() {
        String email = null;
        User updatedUser = null;
        User response = api.updateUserUsingOPTIONS(email, updatedUser);

        // TODO: test validations
    }
    
    /**
     * updateUser
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserUsingPATCHTest() {
        String email = null;
        User updatedUser = null;
        User response = api.updateUserUsingPATCH(email, updatedUser);

        // TODO: test validations
    }
    
    /**
     * updateUser
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserUsingPOSTTest() {
        String email = null;
        User updatedUser = null;
        User response = api.updateUserUsingPOST(email, updatedUser);

        // TODO: test validations
    }
    
    /**
     * updateUser
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserUsingPUTTest() {
        String email = null;
        User updatedUser = null;
        User response = api.updateUserUsingPUT(email, updatedUser);

        // TODO: test validations
    }
    
}
