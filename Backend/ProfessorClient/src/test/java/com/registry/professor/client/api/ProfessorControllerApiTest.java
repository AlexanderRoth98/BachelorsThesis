/*
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.registry.professor.client.api;

import com.registry.professor.client.model.Professor;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProfessorControllerApi
 */
@Ignore
public class ProfessorControllerApiTest {

    private final ProfessorControllerApi api = new ProfessorControllerApi();

    
    /**
     * countProfessors
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void countProfessorsUsingDELETETest() {
        Long response = api.countProfessorsUsingDELETE();

        // TODO: test validations
    }
    
    /**
     * countProfessors
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void countProfessorsUsingGETTest() {
        Long response = api.countProfessorsUsingGET();

        // TODO: test validations
    }
    
    /**
     * countProfessors
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void countProfessorsUsingHEADTest() {
        Long response = api.countProfessorsUsingHEAD();

        // TODO: test validations
    }
    
    /**
     * countProfessors
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void countProfessorsUsingOPTIONSTest() {
        Long response = api.countProfessorsUsingOPTIONS();

        // TODO: test validations
    }
    
    /**
     * countProfessors
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void countProfessorsUsingPATCHTest() {
        Long response = api.countProfessorsUsingPATCH();

        // TODO: test validations
    }
    
    /**
     * countProfessors
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void countProfessorsUsingPOSTTest() {
        Long response = api.countProfessorsUsingPOST();

        // TODO: test validations
    }
    
    /**
     * countProfessors
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void countProfessorsUsingPUTTest() {
        Long response = api.countProfessorsUsingPUT();

        // TODO: test validations
    }
    
    /**
     * createProfessor
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createProfessorUsingDELETETest() {
        Professor professor = null;
        String response = api.createProfessorUsingDELETE(professor);

        // TODO: test validations
    }
    
    /**
     * createProfessor
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createProfessorUsingGETTest() {
        Professor professor = null;
        String response = api.createProfessorUsingGET(professor);

        // TODO: test validations
    }
    
    /**
     * createProfessor
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createProfessorUsingHEADTest() {
        Professor professor = null;
        String response = api.createProfessorUsingHEAD(professor);

        // TODO: test validations
    }
    
    /**
     * createProfessor
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createProfessorUsingOPTIONSTest() {
        Professor professor = null;
        String response = api.createProfessorUsingOPTIONS(professor);

        // TODO: test validations
    }
    
    /**
     * createProfessor
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createProfessorUsingPATCHTest() {
        Professor professor = null;
        String response = api.createProfessorUsingPATCH(professor);

        // TODO: test validations
    }
    
    /**
     * createProfessor
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createProfessorUsingPOSTTest() {
        Professor professor = null;
        String response = api.createProfessorUsingPOST(professor);

        // TODO: test validations
    }
    
    /**
     * createProfessor
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createProfessorUsingPUTTest() {
        Professor professor = null;
        String response = api.createProfessorUsingPUT(professor);

        // TODO: test validations
    }
    
    /**
     * deleteProfessor
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProfessorUsingDELETETest() {
        String professorId = null;
        String response = api.deleteProfessorUsingDELETE(professorId);

        // TODO: test validations
    }
    
    /**
     * deleteProfessor
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProfessorUsingGETTest() {
        String professorId = null;
        String response = api.deleteProfessorUsingGET(professorId);

        // TODO: test validations
    }
    
    /**
     * deleteProfessor
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProfessorUsingHEADTest() {
        String professorId = null;
        String response = api.deleteProfessorUsingHEAD(professorId);

        // TODO: test validations
    }
    
    /**
     * deleteProfessor
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProfessorUsingOPTIONSTest() {
        String professorId = null;
        String response = api.deleteProfessorUsingOPTIONS(professorId);

        // TODO: test validations
    }
    
    /**
     * deleteProfessor
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProfessorUsingPATCHTest() {
        String professorId = null;
        String response = api.deleteProfessorUsingPATCH(professorId);

        // TODO: test validations
    }
    
    /**
     * deleteProfessor
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProfessorUsingPOSTTest() {
        String professorId = null;
        String response = api.deleteProfessorUsingPOST(professorId);

        // TODO: test validations
    }
    
    /**
     * deleteProfessor
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProfessorUsingPUTTest() {
        String professorId = null;
        String response = api.deleteProfessorUsingPUT(professorId);

        // TODO: test validations
    }
    
    /**
     * findProfessorById
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findProfessorByIdUsingDELETETest() {
        String professorId = null;
        Professor response = api.findProfessorByIdUsingDELETE(professorId);

        // TODO: test validations
    }
    
    /**
     * findProfessorById
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findProfessorByIdUsingGETTest() {
        String professorId = null;
        Professor response = api.findProfessorByIdUsingGET(professorId);

        // TODO: test validations
    }
    
    /**
     * findProfessorById
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findProfessorByIdUsingHEADTest() {
        String professorId = null;
        Professor response = api.findProfessorByIdUsingHEAD(professorId);

        // TODO: test validations
    }
    
    /**
     * findProfessorById
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findProfessorByIdUsingOPTIONSTest() {
        String professorId = null;
        Professor response = api.findProfessorByIdUsingOPTIONS(professorId);

        // TODO: test validations
    }
    
    /**
     * findProfessorById
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findProfessorByIdUsingPATCHTest() {
        String professorId = null;
        Professor response = api.findProfessorByIdUsingPATCH(professorId);

        // TODO: test validations
    }
    
    /**
     * findProfessorById
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findProfessorByIdUsingPOSTTest() {
        String professorId = null;
        Professor response = api.findProfessorByIdUsingPOST(professorId);

        // TODO: test validations
    }
    
    /**
     * findProfessorById
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findProfessorByIdUsingPUTTest() {
        String professorId = null;
        Professor response = api.findProfessorByIdUsingPUT(professorId);

        // TODO: test validations
    }
    
    /**
     * readProfessor
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readProfessorUsingDELETETest() {
        List<Professor> response = api.readProfessorUsingDELETE();

        // TODO: test validations
    }
    
    /**
     * readProfessor
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readProfessorUsingGETTest() {
        List<Professor> response = api.readProfessorUsingGET();

        // TODO: test validations
    }
    
    /**
     * readProfessor
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readProfessorUsingHEADTest() {
        List<Professor> response = api.readProfessorUsingHEAD();

        // TODO: test validations
    }
    
    /**
     * readProfessor
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readProfessorUsingOPTIONSTest() {
        List<Professor> response = api.readProfessorUsingOPTIONS();

        // TODO: test validations
    }
    
    /**
     * readProfessor
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readProfessorUsingPATCHTest() {
        List<Professor> response = api.readProfessorUsingPATCH();

        // TODO: test validations
    }
    
    /**
     * readProfessor
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readProfessorUsingPOSTTest() {
        List<Professor> response = api.readProfessorUsingPOST();

        // TODO: test validations
    }
    
    /**
     * readProfessor
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readProfessorUsingPUTTest() {
        List<Professor> response = api.readProfessorUsingPUT();

        // TODO: test validations
    }
    
    /**
     * updateProfessor
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateProfessorUsingDELETETest() {
        String professorId = null;
        Professor updatedProfessor = null;
        String response = api.updateProfessorUsingDELETE(professorId, updatedProfessor);

        // TODO: test validations
    }
    
    /**
     * updateProfessor
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateProfessorUsingGETTest() {
        String professorId = null;
        Professor updatedProfessor = null;
        String response = api.updateProfessorUsingGET(professorId, updatedProfessor);

        // TODO: test validations
    }
    
    /**
     * updateProfessor
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateProfessorUsingHEADTest() {
        String professorId = null;
        Professor updatedProfessor = null;
        String response = api.updateProfessorUsingHEAD(professorId, updatedProfessor);

        // TODO: test validations
    }
    
    /**
     * updateProfessor
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateProfessorUsingOPTIONSTest() {
        String professorId = null;
        Professor updatedProfessor = null;
        String response = api.updateProfessorUsingOPTIONS(professorId, updatedProfessor);

        // TODO: test validations
    }
    
    /**
     * updateProfessor
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateProfessorUsingPATCHTest() {
        String professorId = null;
        Professor updatedProfessor = null;
        String response = api.updateProfessorUsingPATCH(professorId, updatedProfessor);

        // TODO: test validations
    }
    
    /**
     * updateProfessor
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateProfessorUsingPOSTTest() {
        String professorId = null;
        Professor updatedProfessor = null;
        String response = api.updateProfessorUsingPOST(professorId, updatedProfessor);

        // TODO: test validations
    }
    
    /**
     * updateProfessor
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateProfessorUsingPUTTest() {
        String professorId = null;
        Professor updatedProfessor = null;
        String response = api.updateProfessorUsingPUT(professorId, updatedProfessor);

        // TODO: test validations
    }
    
}
