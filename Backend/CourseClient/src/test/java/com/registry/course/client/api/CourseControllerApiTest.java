/*
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.registry.course.client.api;

import com.registry.course.client.model.Course;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CourseControllerApi
 */
@Ignore
public class CourseControllerApiTest {

    private final CourseControllerApi api = new CourseControllerApi();

    
    /**
     * createCourse
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCourseUsingDELETETest() {
        Course course = null;
        String response = api.createCourseUsingDELETE(course);

        // TODO: test validations
    }
    
    /**
     * createCourse
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCourseUsingGETTest() {
        Course course = null;
        String response = api.createCourseUsingGET(course);

        // TODO: test validations
    }
    
    /**
     * createCourse
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCourseUsingHEADTest() {
        Course course = null;
        String response = api.createCourseUsingHEAD(course);

        // TODO: test validations
    }
    
    /**
     * createCourse
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCourseUsingOPTIONSTest() {
        Course course = null;
        String response = api.createCourseUsingOPTIONS(course);

        // TODO: test validations
    }
    
    /**
     * createCourse
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCourseUsingPATCHTest() {
        Course course = null;
        String response = api.createCourseUsingPATCH(course);

        // TODO: test validations
    }
    
    /**
     * createCourse
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCourseUsingPOSTTest() {
        Course course = null;
        String response = api.createCourseUsingPOST(course);

        // TODO: test validations
    }
    
    /**
     * createCourse
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCourseUsingPUTTest() {
        Course course = null;
        String response = api.createCourseUsingPUT(course);

        // TODO: test validations
    }
    
    /**
     * deleteCourse
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCourseUsingDELETETest() {
        String courseId = null;
        String response = api.deleteCourseUsingDELETE(courseId);

        // TODO: test validations
    }
    
    /**
     * deleteCourse
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCourseUsingGETTest() {
        String courseId = null;
        String response = api.deleteCourseUsingGET(courseId);

        // TODO: test validations
    }
    
    /**
     * deleteCourse
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCourseUsingHEADTest() {
        String courseId = null;
        String response = api.deleteCourseUsingHEAD(courseId);

        // TODO: test validations
    }
    
    /**
     * deleteCourse
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCourseUsingOPTIONSTest() {
        String courseId = null;
        String response = api.deleteCourseUsingOPTIONS(courseId);

        // TODO: test validations
    }
    
    /**
     * deleteCourse
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCourseUsingPATCHTest() {
        String courseId = null;
        String response = api.deleteCourseUsingPATCH(courseId);

        // TODO: test validations
    }
    
    /**
     * deleteCourse
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCourseUsingPOSTTest() {
        String courseId = null;
        String response = api.deleteCourseUsingPOST(courseId);

        // TODO: test validations
    }
    
    /**
     * deleteCourse
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCourseUsingPUTTest() {
        String courseId = null;
        String response = api.deleteCourseUsingPUT(courseId);

        // TODO: test validations
    }
    
    /**
     * readCourses
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readCoursesUsingDELETETest() {
        List<Course> response = api.readCoursesUsingDELETE();

        // TODO: test validations
    }
    
    /**
     * readCourses
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readCoursesUsingGETTest() {
        List<Course> response = api.readCoursesUsingGET();

        // TODO: test validations
    }
    
    /**
     * readCourses
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readCoursesUsingHEADTest() {
        List<Course> response = api.readCoursesUsingHEAD();

        // TODO: test validations
    }
    
    /**
     * readCourses
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readCoursesUsingOPTIONSTest() {
        List<Course> response = api.readCoursesUsingOPTIONS();

        // TODO: test validations
    }
    
    /**
     * readCourses
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readCoursesUsingPATCHTest() {
        List<Course> response = api.readCoursesUsingPATCH();

        // TODO: test validations
    }
    
    /**
     * readCourses
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readCoursesUsingPOSTTest() {
        List<Course> response = api.readCoursesUsingPOST();

        // TODO: test validations
    }
    
    /**
     * readCourses
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readCoursesUsingPUTTest() {
        List<Course> response = api.readCoursesUsingPUT();

        // TODO: test validations
    }
    
    /**
     * updateCourse
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCourseUsingDELETETest() {
        String courseId = null;
        Course updatedCourse = null;
        String response = api.updateCourseUsingDELETE(courseId, updatedCourse);

        // TODO: test validations
    }
    
    /**
     * updateCourse
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCourseUsingGETTest() {
        String courseId = null;
        Course updatedCourse = null;
        String response = api.updateCourseUsingGET(courseId, updatedCourse);

        // TODO: test validations
    }
    
    /**
     * updateCourse
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCourseUsingHEADTest() {
        String courseId = null;
        Course updatedCourse = null;
        String response = api.updateCourseUsingHEAD(courseId, updatedCourse);

        // TODO: test validations
    }
    
    /**
     * updateCourse
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCourseUsingOPTIONSTest() {
        String courseId = null;
        Course updatedCourse = null;
        String response = api.updateCourseUsingOPTIONS(courseId, updatedCourse);

        // TODO: test validations
    }
    
    /**
     * updateCourse
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCourseUsingPATCHTest() {
        String courseId = null;
        Course updatedCourse = null;
        String response = api.updateCourseUsingPATCH(courseId, updatedCourse);

        // TODO: test validations
    }
    
    /**
     * updateCourse
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCourseUsingPOSTTest() {
        String courseId = null;
        Course updatedCourse = null;
        String response = api.updateCourseUsingPOST(courseId, updatedCourse);

        // TODO: test validations
    }
    
    /**
     * updateCourse
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCourseUsingPUTTest() {
        String courseId = null;
        Course updatedCourse = null;
        String response = api.updateCourseUsingPUT(courseId, updatedCourse);

        // TODO: test validations
    }
    
}
