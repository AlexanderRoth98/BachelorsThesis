/*
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.registry.student.client.api;

import java.util.List;

import org.junit.Ignore;
import org.junit.Test;

import com.registry.student.client.model.Student;

/**
 * API tests for StudentControllerApi
 */
@Ignore
public class StudentControllerApiTest {

    private final StudentControllerApi api = new StudentControllerApi();

    
    /**
     * createStudent
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createStudentUsingDELETETest() {
        Student student = null;
        String response = api.createStudentUsingDELETE(student);

        // TODO: test validations
    }
    
    /**
     * createStudent
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createStudentUsingGETTest() {
        Student student = null;
        String response = api.createStudentUsingGET(student);

        // TODO: test validations
    }
    
    /**
     * createStudent
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createStudentUsingHEADTest() {
        Student student = null;
        String response = api.createStudentUsingHEAD(student);

        // TODO: test validations
    }
    
    /**
     * createStudent
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createStudentUsingOPTIONSTest() {
        Student student = null;
        String response = api.createStudentUsingOPTIONS(student);

        // TODO: test validations
    }
    
    /**
     * createStudent
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createStudentUsingPATCHTest() {
        Student student = null;
        String response = api.createStudentUsingPATCH(student);

        // TODO: test validations
    }
    
    /**
     * createStudent
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createStudentUsingPOSTTest() {
        Student student = null;
        String response = api.createStudentUsingPOST(student);

        // TODO: test validations
    }
    
    /**
     * createStudent
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createStudentUsingPUTTest() {
        Student student = null;
        String response = api.createStudentUsingPUT(student);

        // TODO: test validations
    }
    
    /**
     * deleteStudent
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteStudentUsingDELETETest() {
        String registrationNumber = null;
        String response = api.deleteStudentUsingDELETE(registrationNumber);

        // TODO: test validations
    }
    
    /**
     * deleteStudent
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteStudentUsingGETTest() {
        String registrationNumber = null;
        String response = api.deleteStudentUsingGET(registrationNumber);

        // TODO: test validations
    }
    
    /**
     * deleteStudent
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteStudentUsingHEADTest() {
        String registrationNumber = null;
        String response = api.deleteStudentUsingHEAD(registrationNumber);

        // TODO: test validations
    }
    
    /**
     * deleteStudent
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteStudentUsingOPTIONSTest() {
        String registrationNumber = null;
        String response = api.deleteStudentUsingOPTIONS(registrationNumber);

        // TODO: test validations
    }
    
    /**
     * deleteStudent
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteStudentUsingPATCHTest() {
        String registrationNumber = null;
        String response = api.deleteStudentUsingPATCH(registrationNumber);

        // TODO: test validations
    }
    
    /**
     * deleteStudent
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteStudentUsingPOSTTest() {
        String registrationNumber = null;
        String response = api.deleteStudentUsingPOST(registrationNumber);

        // TODO: test validations
    }
    
    /**
     * deleteStudent
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteStudentUsingPUTTest() {
        String registrationNumber = null;
        String response = api.deleteStudentUsingPUT(registrationNumber);

        // TODO: test validations
    }
    
    /**
     * readStudents
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readStudentsUsingDELETETest() {
        List<Student> response = api.readStudentsUsingDELETE();

        // TODO: test validations
    }
    
    /**
     * readStudents
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readStudentsUsingGETTest() {
        List<Student> response = api.readStudentsUsingGET();

        // TODO: test validations
    }
    
    /**
     * readStudents
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readStudentsUsingHEADTest() {
        List<Student> response = api.readStudentsUsingHEAD();

        // TODO: test validations
    }
    
    /**
     * readStudents
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readStudentsUsingOPTIONSTest() {
        List<Student> response = api.readStudentsUsingOPTIONS();

        // TODO: test validations
    }
    
    /**
     * readStudents
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readStudentsUsingPATCHTest() {
        List<Student> response = api.readStudentsUsingPATCH();

        // TODO: test validations
    }
    
    /**
     * readStudents
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readStudentsUsingPOSTTest() {
        List<Student> response = api.readStudentsUsingPOST();

        // TODO: test validations
    }
    
    /**
     * readStudents
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readStudentsUsingPUTTest() {
        List<Student> response = api.readStudentsUsingPUT();

        // TODO: test validations
    }
    
    /**
     * updateStudent
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateStudentUsingDELETETest() {
        String registrationNumber = null;
        Student updateStudent = null;
        String response = api.updateStudentUsingDELETE(registrationNumber, updateStudent);

        // TODO: test validations
    }
    
    /**
     * updateStudent
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateStudentUsingGETTest() {
        String registrationNumber = null;
        Student updateStudent = null;
        String response = api.updateStudentUsingGET(registrationNumber, updateStudent);

        // TODO: test validations
    }
    
    /**
     * updateStudent
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateStudentUsingHEADTest() {
        String registrationNumber = null;
        Student updateStudent = null;
        String response = api.updateStudentUsingHEAD(registrationNumber, updateStudent);

        // TODO: test validations
    }
    
    /**
     * updateStudent
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateStudentUsingOPTIONSTest() {
        String registrationNumber = null;
        Student updateStudent = null;
        String response = api.updateStudentUsingOPTIONS(registrationNumber, updateStudent);

        // TODO: test validations
    }
    
    /**
     * updateStudent
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateStudentUsingPATCHTest() {
        String registrationNumber = null;
        Student updateStudent = null;
        String response = api.updateStudentUsingPATCH(registrationNumber, updateStudent);

        // TODO: test validations
    }
    
    /**
     * updateStudent
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateStudentUsingPOSTTest() {
        String registrationNumber = null;
        Student updateStudent = null;
        String response = api.updateStudentUsingPOST(registrationNumber, updateStudent);

        // TODO: test validations
    }
    
    /**
     * updateStudent
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateStudentUsingPUTTest() {
        String registrationNumber = null;
        Student updateStudent = null;
        String response = api.updateStudentUsingPUT(registrationNumber, updateStudent);

        // TODO: test validations
    }
    
}
