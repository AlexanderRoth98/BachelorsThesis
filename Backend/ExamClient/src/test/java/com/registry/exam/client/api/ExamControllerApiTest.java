/*
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.registry.exam.client.api;

import com.registry.exam.client.model.Exam;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ExamControllerApi
 */
@Ignore
public class ExamControllerApiTest {

    private final ExamControllerApi api = new ExamControllerApi();

    
    /**
     * createExam
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createExamUsingDELETETest() {
        Exam exam = null;
        String response = api.createExamUsingDELETE(exam);

        // TODO: test validations
    }
    
    /**
     * createExam
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createExamUsingGETTest() {
        Exam exam = null;
        String response = api.createExamUsingGET(exam);

        // TODO: test validations
    }
    
    /**
     * createExam
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createExamUsingHEADTest() {
        Exam exam = null;
        String response = api.createExamUsingHEAD(exam);

        // TODO: test validations
    }
    
    /**
     * createExam
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createExamUsingOPTIONSTest() {
        Exam exam = null;
        String response = api.createExamUsingOPTIONS(exam);

        // TODO: test validations
    }
    
    /**
     * createExam
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createExamUsingPATCHTest() {
        Exam exam = null;
        String response = api.createExamUsingPATCH(exam);

        // TODO: test validations
    }
    
    /**
     * createExam
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createExamUsingPOSTTest() {
        Exam exam = null;
        String response = api.createExamUsingPOST(exam);

        // TODO: test validations
    }
    
    /**
     * createExam
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createExamUsingPUTTest() {
        Exam exam = null;
        String response = api.createExamUsingPUT(exam);

        // TODO: test validations
    }
    
    /**
     * deleteExam
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteExamUsingDELETETest() {
        String examId = null;
        String response = api.deleteExamUsingDELETE(examId);

        // TODO: test validations
    }
    
    /**
     * deleteExam
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteExamUsingGETTest() {
        String examId = null;
        String response = api.deleteExamUsingGET(examId);

        // TODO: test validations
    }
    
    /**
     * deleteExam
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteExamUsingHEADTest() {
        String examId = null;
        String response = api.deleteExamUsingHEAD(examId);

        // TODO: test validations
    }
    
    /**
     * deleteExam
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteExamUsingOPTIONSTest() {
        String examId = null;
        String response = api.deleteExamUsingOPTIONS(examId);

        // TODO: test validations
    }
    
    /**
     * deleteExam
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteExamUsingPATCHTest() {
        String examId = null;
        String response = api.deleteExamUsingPATCH(examId);

        // TODO: test validations
    }
    
    /**
     * deleteExam
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteExamUsingPOSTTest() {
        String examId = null;
        String response = api.deleteExamUsingPOST(examId);

        // TODO: test validations
    }
    
    /**
     * deleteExam
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteExamUsingPUTTest() {
        String examId = null;
        String response = api.deleteExamUsingPUT(examId);

        // TODO: test validations
    }
    
    /**
     * readExam
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readExamUsingDELETETest() {
        List<Exam> response = api.readExamUsingDELETE();

        // TODO: test validations
    }
    
    /**
     * readExam
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readExamUsingGETTest() {
        List<Exam> response = api.readExamUsingGET();

        // TODO: test validations
    }
    
    /**
     * readExam
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readExamUsingHEADTest() {
        List<Exam> response = api.readExamUsingHEAD();

        // TODO: test validations
    }
    
    /**
     * readExam
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readExamUsingOPTIONSTest() {
        List<Exam> response = api.readExamUsingOPTIONS();

        // TODO: test validations
    }
    
    /**
     * readExam
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readExamUsingPATCHTest() {
        List<Exam> response = api.readExamUsingPATCH();

        // TODO: test validations
    }
    
    /**
     * readExam
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readExamUsingPOSTTest() {
        List<Exam> response = api.readExamUsingPOST();

        // TODO: test validations
    }
    
    /**
     * readExam
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readExamUsingPUTTest() {
        List<Exam> response = api.readExamUsingPUT();

        // TODO: test validations
    }
    
    /**
     * updateExam
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateExamUsingDELETETest() {
        String examId = null;
        Exam updatedExam = null;
        String response = api.updateExamUsingDELETE(examId, updatedExam);

        // TODO: test validations
    }
    
    /**
     * updateExam
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateExamUsingGETTest() {
        String examId = null;
        Exam updatedExam = null;
        String response = api.updateExamUsingGET(examId, updatedExam);

        // TODO: test validations
    }
    
    /**
     * updateExam
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateExamUsingHEADTest() {
        String examId = null;
        Exam updatedExam = null;
        String response = api.updateExamUsingHEAD(examId, updatedExam);

        // TODO: test validations
    }
    
    /**
     * updateExam
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateExamUsingOPTIONSTest() {
        String examId = null;
        Exam updatedExam = null;
        String response = api.updateExamUsingOPTIONS(examId, updatedExam);

        // TODO: test validations
    }
    
    /**
     * updateExam
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateExamUsingPATCHTest() {
        String examId = null;
        Exam updatedExam = null;
        String response = api.updateExamUsingPATCH(examId, updatedExam);

        // TODO: test validations
    }
    
    /**
     * updateExam
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateExamUsingPOSTTest() {
        String examId = null;
        Exam updatedExam = null;
        String response = api.updateExamUsingPOST(examId, updatedExam);

        // TODO: test validations
    }
    
    /**
     * updateExam
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateExamUsingPUTTest() {
        String examId = null;
        Exam updatedExam = null;
        String response = api.updateExamUsingPUT(examId, updatedExam);

        // TODO: test validations
    }
    
}
